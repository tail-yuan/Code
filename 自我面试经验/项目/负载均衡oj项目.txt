负载均衡式OJ系统
一.简单介绍一下自己的项目
client_sever端向用户提供了获取题目列表,对应信息,以及在线编程判题的能力,server后端提供了编译和运行的能力.

sever向client提供编译和运行功能,返回status状态码,reason常见解释信息以及结果信息(文件中信息).
	1. 将传来的json串反序列化,然后拼接为源文件,毫秒级时间戳+递增保证文件名唯一性的临时文件,
		fork创建子进程进行编译和运行功能,将运行结果,报错信息,运行错误信息统一重定向到对应后缀文件然后返回json字符串给前端.
	     具体功能:
		1.1 compile编译功能就是fork创建子进程,使用execlp程序替换函数为g++,将信息输出从标准重定向到指定文件中.父进程查看编译情况是否成功.
		1.2 runner功能就是fork创建子进程,execl程序替换取执行.exe文件运行.父进程只关心是否出现异常中止.

	2. 引入日志,对应每一个源文件的退出信息以及运行情况,使用时: LOG(错误级别)<<"错误信息";
		#define LOG(level) Log(#level,__FILE__,__LINE__) //将宏参带#可以将宏名称也就是日志等级以字符串的形式进行打印
		2.1 日志功能如何设计的? 使用简单的宏替换的方式,__FILE__ __LINE__ 以及<退出码,严重级别>打印到显示器和文件中,方便查看和统一.

client
client_server.cc 向用户提供获取题目列表以及单个题目的具体信息功能Get,和Judge功能Post,三个http请求功能.

	1. 文件版就读取特定目录下的题目名的文件,数据库版本就链接MYSQL数据库获取对应表中的信息,
		1.1 题目信息包括题目描述,限制时空复杂度,需要包含的头文件,main函数拼接,以及测试用例,
		    统一将Question结构体填充然后使用json序列化发送给server端.

	2. control模块: 管理机器Machine结构体(ip+port+load+锁(涉及并发访问load,所以得好好保护)),
			负载均衡选择功能,加载题目列表和信息,以及Judge功能即向server发送请求和json字符串.
				
		2.1 两个数组一个装载在线主机,一个装载离线主机,便于实现离线上线功能
		2.2 遍历所有在线主机,选择负载最小的机器.
		2.3 Judge功能:根据题目编号,反序列化用户输入json串,重新拼接构建json串(input,cpuLimit,memLimit)和server建立http请求.(200成功了)
	
	3. model模块: 管理Question结构体,和MYSQL建立联系,
			执行SQL语句获取表一行数据,然后拼接Question结构体->vector中.
			获取题目列表就是"select * from 表名",具体某一个题再加上"where id=...";
			Question结构体包括,编号,难度,时空要求,预设代码,测试用例.

	4. view模块: 引入ctemplate库将结构体数据渲染为一个网页.html输出.
			只需要有两个网页,一个是题目列表网页,一个是某个题目网页,vector<Question*>->形成数据字典->填充子字典->渲染
			
二.项目中遇到哪些问题
1. 环境问题
	1.1 引入cpphttplib打包网络服务时,需要将gcc升级到最新才能够使用,还需要引入pthread原生线程库才能使用.
	1.2 阿里云每次执行时都需要重新编译一次,否则就会报错,而腾讯云就没这个问题.
	1.3 遇到内存不足的问题
	1.4 连接数据库,编译时需要添加 -lmysqlclient -ldl动态链接才能编译成功.
2. 题目设计问题
	2.1 每一个题目使用setrlimit()应该设置的时空复杂度具体应该是多少.
	2.2 返回网页信息时需要指定具体类型,application/json,text/plain,以及charset=utf-8避免乱码出现.
	2.3 日志设置问题.
	2.4 MVC模式的了解和学习.
三. 项目还有什么可优化的地方
	1.1 后端执行代码的编译和运行操作时,都是每一个唯一文件名文件各自去创建一个子进程执行的,可以优化为线程池系统.
	1.2 负载均衡的选择方式只是简单的选择负载最低的,还需要其他设计提升.
	1.3 升级注册登录和录题功能.
	1.4 题库中的题目还需要进一步丰富.