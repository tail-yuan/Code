基于Boost库的在线搜索引擎

一.简单介绍
客户端浏览器访问,建立http请求,输入查找关键字,后端的搜索模块根据进行索引,和权重信息拼接网页.(网页title,网页摘要内容,网页跳转地址)
将Boost库doc/文件夹下载到本地
1. 进行数据清洗,提取有效内容;
	1.1 读取文件内容->vector<string> file_list;
		使用Boost库中的函数 0. 判断路径下文件是否存在1. 提取普通文件2. 挑选.html文件 3. 将Boost库对象->string 插入file_list中.
	1.2 读取file_list中的每一个文档string,提取title,content,url->构建DocInfo_t对象,->vector<>中
		1.2.1 title, begin=string.find("<title>"),end=find("</title>")使用字符串截取即可
		1.2.2 content,遇到>,说名是标签结尾,后面是正文了.遇到<说明又是一个标签结束.状态机表示是标签还是正文
		1.2.3 url,因为是构建某一文件跳转网页,所以不同文件不一样,但是打头的都一样:"https://www.boost.org/doc/libs/1_79_0/doc/html"
			然后拼接我们把他下载到data/input文件夹下的pwd,进行拼接即可获取跳转地址
	1.3 将解析之后的文件内容->output/raw.txt中,一个文件的title/3content/3url分割,不同文件之间用/n.

2. 建立索引使用单例模式.
检索内容构建正排索引vector<文档id,文档string>,倒排索引<关键字,所处文件汇总>即倒排拉链.
	2.1 构建正排索引:使用split函数,以/3为分割填充DocInfo_t结构体内容->vector

	2.1 构建倒排索引需要统计词频,计算权重.所以使用jieba分词,对标题和内容进行词频统计(统一为小写)
		实现构建索引的过程.
		unordered_map <std::string ,word_cnt> word_map;

		填充InvertedElem结构体,文档id,weight计算权重,word包含关键字

		整理unordered_map<不重复关键字,vector<InvertedElem>>InvertedList,即倒排拉链


	2.2 模拟一次: 根据关键字key->倒排索引获取vector<文档id>->正排索引获取文档内容->title concent url拼接信息->构建响应结果

3. 搜索模块
	3.1 获取单例模式的索引
	3.2 搜索的词也要分词,每一个词在索引中获取倒排拉链.遍历拉链节点->正排索引->
		可能存在重复文档,就将文档id相同的结果放到同一个位置,将权重更新最好.
	3.3 合并排序.
		汇总查找结果然后权值降序排列.std::vector<InvertedElemPrint> inverted_list_all,sort(inverted_list_all...)
		InvertedElemPrint结构体包含id,weight和words数组,分出不同词但是都是一个文档中的.
		std::vector<std::string>words;//存放相同ID下的分出来的不同的词，实现去重效果
	3.4 构建json串返回
		读取inverted_list_all,下标即文档id->正排索引得到文档清洗后的内容,填充DocInfo_t结构体,序列化串,
		每遍历一个节点追加到串中.
4. 引入cpphttplib构建网络服务
5. 去重
6. 权重设计决定在网页端显示的先后顺序.

二. 遇到的问题
1. 安装Boost库,使用Boost库的文件操作函数时,要通过编译需要引入两个库,-lboost_system -lboostfilesystem.
2. 引入httplib时需要将gcc升级为较高版本.
三. 优化的点
1. 将下载文档->爬虫实时爬取内容!
2. 热词推荐板块!
3. 设置注册登录!
4. 权重设计.
5. 获取摘要的函数设计.